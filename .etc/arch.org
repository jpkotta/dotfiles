* TODO
* MISCELLANEOUS
** pacman
*** /etc/pacman.conf
ILoveCandy
Color
*** /etc/pacman.d/mirrorlist
reflector -a 1 --country "United States" --sort rate -n 5 --save /etc/pacman.d/mirrorlist
** modules
*** /etc/modprobe.d/nobeep.conf
blacklist pcspkr
*** /etc/modprobe.d/loop.conf
options loop max_part=15
** misc config
*** /etc/fstab
*** /etc/hostname
*** /etc/locale.gen
*** /etc/locale.conf
LANG=en_US.UTF-8
*** /etc/pam.d/system-auth
auth      optional  pam_faildelay.so delay=500000
auth      required  pam_unix.so     try_first_pass nullok nodelay
*** hwclock --systohc --utc
*** timedatectl set-ntp true
*** timedatectl set-timezone America/Chicago
*** /etc/sysctl.d/99-sysctl.conf
vm.swappiness = 60
kernel.sysrq = 1
** users
useradd -m -g users -s /bin/bash $user ; chfn $user ; passwd $user
for g in adm games log systemd-journal users uucp wheel ; do gpasswd -a $user $g ; done
** udev
*** /etc/udev/rules.d/99-lowbatt.rules
SUBSYSTEM=="power supply", ATTR{status}=="Discharging", ATTR{capacity}=="2", RUN+="/usr/bin/systemctl suspend"
** systemd
*** /etc/systemd/journald.conf
SystemMaxUse=100M # max journal size
** systemd-networkd
systemctl disable --now dhcpcd.service
systemctl enable --now systemd-networkd.service
systemctl enable --now systemd-resolved.service
ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
*** /etc/systemd/resolved.conf.d/packet.conf
[Resolve]
Domains=packetdigital.com dhcp.packetdigital.com
*** /etc/systemd/network/ethernet.network
[Match]
Name=en*

[Network]
DHCP=ipv4
Address=192.168.168.20/24
*** /etc/systemd/network/usb-edison.network
[Match]
Name=ethusb0

[Network]
Address=192.168.2.2/24
*** /etc/systemd/network/10-usb-edison.link
[Match]
MACAddress=72:e8:af:2f:a8:d6

[Link]
Description=Edison USB Ethernet Adapter
Name=ethusb0
* abcde
** atomicparsley
* alsa-utils
* android-tools
** android-udev
gpasswd -a $user adbusers
* apg
* ascii
* aspell-en
* avr-gcc
** avr-libc
** avrdude
* base-devel
* bash-completion
* bcache-tools-git
make-bcache -B /dev/sdXN # backing
echo /dev/sdXN > /sys/fs/bcache/register_quiet
make-bcache -C /dev/sdY # cache
echo /dev/sdY > /sys/fs/bcache/register
echo <cache UUID> > /sys/block/bcacheN/bcache/attach
** /etc/mkinitcpio.conf
MODULES += bcache
HOOKS += bcache
* btrfs-progs
ln -s /bin/true /sbin/fsck.btrfs
** /etc/cron.monthly/defrag
filesystems=`mount | grep btrfs | grep -o "on .* type" | sed -e "s/^on //" -e "s/ type$//"`
for fs in $filesystems ; do
    btrfs filesystem defrag --
    find "$fs" -xdev \( -type f -o -type d \) \
        -exec ionice -c idle btrfs filesystem defrag -- '{}' +
done
* bumblebee
gpasswd -a $user bumblebee
systemctl enable --now bumblebeed.service
** nvidia-dkms
** bbswitch-dkms
* chromium
** chromium-pepper-flash
** chromium-widevine
* colordiff
* commit-patch
* compton-git
* cups
gpasswd -a $user lp
gpasswd -a $user sys
systemctl enable --now cups-browsed.service
lpadmin -d PRINTER_NAME
http://localhost:631
used the C3170i/postscript driver
** cups-filters
** cups-pdf
** foomatic-db
** foomatic-db-engine
** foomatic-db-nonfree
** gtk3
* dclock
* dictd
* emacs-lucid
* etc-update
* figlet
* firefox
* foldingathome-noroot
/opt/fah/fah-config
systemctl enable --now foldingathome.service
* font-bh-ttf
* font-mathematica
* fortune-mod
* fvwm
* gdmap
* geeqie
** fbida
* gimp
** gimp-plugin-gmic
* git
* gkrellm
** gkrellweather
* global
* go
* gpm
systemctl enable --now gpm.service
* haveged
systemctl enable --now haveged.service
* hdparm
** /etc/udev/rules.d/hdparm.rules
ACTION=="add", KERNEL=="sd[az]", ATTR{queue/rotational}=="1", RUN+="/sbin/hdparm -B 254 /dev/$kernel"
* htop
* hugin
* iftop
* imagemagick
** imagemagick-doc
* intel-ucode
grub-mkconfig -o /boot/grub/grub.cfg
* iotop
* jupyter-notebook
* k3b
pacman -S --needed dvd+rw-tools vcdimager transcode emovix cdrdao cdparanoia
* keepassxc
* libreoffice-still
* lsof
* luminancehdr
* lyx
* mercurial
** hg-git-hg
** hgview
*** python2-qscintilla
* mesa-demos
* mlocate
** /etc/cron.weekly/updatedb-network
LOCATE_PATH=""
for share in nfs engineering hardware ; do
    ${UPDATEDB} \
        --prunefs "" \
        --database-root /media/$share \
        --output /var/lib/mlocate/mlocate-${share}.db

    LOCATE_PATH=$LOCATE_PATH:/var/lib/mlocate/mlocate-${share}.db
done

# add LOCATE_PATH to your ~/.bashrc to have locate search these databases
* mpd
systemctl --user enable --now mpd.service
systemctl --user enable --now ralbumd.service
** mpc
** ncmpcpp
* namcap
* nfs-utils
** client
systemctl enable --now rpcbind.service
*** /etc/fstab
SERVER:/path/on/server /media/MOUNTPOINT nfs ro,soft,intr
** server
mkdir /srv/nfs
mkdir /srv/nfs/yukon
chgrp users /srv/nfs/yukon
chmod g+rwx /srv/nfs/yukon
systemctl enable --now nfs-server.service
*** /etc/exports.d/yukon.exports
/srv/nfs/yukon *(rw,async,no_subtree_check,no_root_squash)
*** /etc/nfs.conf
[nfsd]
udp=y # for u-boot
* nitrogen
systemctl --user enable --now nitrogen.service
* notification-daemon
systemctl --user enable --now notification-daemon.service
* numlockx
systemctl --user enable --now numlockx.service
* nvidia
** nvclock
** nvidia-utils
* okular
xdg-mime default okularApplication_pdf.desktop application/pdf
* openssh
systemctl enable --now sshd.service
** /etc/ssh/sshd_config
X11Forwarding yes
** keychain
** sshfs
* p7zip
* pacman-contrib
* pacserve
systemctl enable --now pacserve.service
pacman.conf-insert_pacserve | sudo tee /etc/pacman.conf
* pbzip2
* perl-rename
* perl-term-readline-gnu
* pigz
* pikaur
cd /tmp
for i in pikaur ; do
    curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/$i.tar.gz
    tar xf $i.tar.gz
    (cd $i ; makepkg -si)
done

(cd /var/cache/pacman ; mkdir -p aur ; chgrp wheel aur ; chmod g+rwx aur)
** /etc/makepkg.conf
PKGDEST=/var/cache/pacman/aur/
MAKEFLAGS="j$(nproc)"
COMPRESSXZ=(xz -c -z --threads=0 -)
** One or more PGP signatures could not be verified!
gpg --recv-keys KEY_ID
* pkgbuild-introspection
* pkgfile
systemctl enable --now pkgfile-update.timer
* pmount
* pulseaudio
gpasswd -a $user audio
** pavucontrol
** pulseaudio-alsa
** pulseaudio-equalizer
* pysolfc
* python
** ipython
*** ipython-notebook
python-jinja python-tornado python-pyzmq python-pygments qt5-svg
** python-matplotlib
** python-numpy
** python-pylint
** python-pymysql
** python-pyserial
** python-scipy
** python-sqlalchemy
** python-mpd2
* python2
** ipython2
*** ipython2-notebook
python2-jinja python2-tornado python2-pyzmq python2-pygments qt5-svg
** python2-matplotlib
** python2-numpy
** python2-pylint
** python2-pymysql
** python2-scipy
** python2-pyserial
** python2-sqlalchemy
* qbittorrent
* rdesktop
* redshift-minimal
systemctl --user enable --now redshift.service
* reflector
* rxvt-unicode
* samba
systemctl enable --now smbd.service
systemctl enable --now nmbd.service
systemctl enable --now winbindd.service
sudo pdbedit -a -u $user
** /etc/samba/smb.conf
* slim
systemctl enable --now slim.service
* smbclient
** /etc/samba/private/SERVER.cred
username=USERNAME
password=PASSWORD
** /etc/fstab
//SERVER/SHARE /media/MOUNTPOINT cifs x-systemd.automount,x-systemd.idle-timeout=1min,rw,uid=USER,gid=GROUP,credentials=/etc/samba/private/SERVER.cred,iocharset=utf8,file_mode=0644,dir_mode=0755 0 0
* spideroak-one
* strace
* subversion
* sudo
gpasswd -a $user wheel
** /etc/sudoers.d/wheel
## Uncomment to allow members of group wheel to execute any command
%wheel ALL=(ALL) ALL

## Same thing without a password
%wheel ALL=(ALL) NOPASSWD: /usr/bin/mount.cifs, /usr/bin/umount
* systemd-nspawn
** dependencies
debootstrap
gnupg1
mkosi
ubuntu-keyring
** container creation
mkosi -f
ln -sf /var/lib/machines/$mach_name.service /etc/systemd/nspawn/
systemctl enable --now machines.target
systemctl enable --now systemd-nspawn@$mach_name.service
*** /etc/systemd/system/systemd-nspawn@$mach_name.service.d/override.conf
[Service]
DeviceAllow=char-usb_device rwm
** container start
machinectl start $mach_name
machinectl shell $mach_user@$mach_name /bin/bash
*** /etc/polkit-1/rules.d/99-machinectl.rules
/* -*- mode: js -*- */
/* Allow users in wheel group to run `machinectl shell` without authentication */
polkit.addRule(function(action, subject) {
    if (action.id == "org.freedesktop.machine1.shell" &&
        subject.user == "jpkotta") {
        //subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});
** see also
*** [[http://blog.oddbit.com/2016/02/07/systemd-nspawn-for-fun-and-well-mostly-f/][Run ARM binaries in a systemd-nspawn container with QEMU]]
pacaur -S qemu-arm-static
systemctl restart systemd-binfmt.service
sudo systemd-nspawn -q -M minibian --bind /usr/bin/qemu-arm-static /bin/bash
* systemd-swap
# make sure there is a swap partition/file
systemctl enable --now systemctl-swap.service
** /etc/systemd/swap.conf
zswap_enabled=1
* texlive-most
* tftp-hpa
gpasswd -a $user ftp
chgrp ftp /srv/tftp/
chmod g+rwx /srv/tftp/
* tlp
systemctl enable --now tlp.service
* tmux
* tpacpi-bat-git
FIXME: pull request pending
systemctl enable tpacpi.service
** acpi_call-git-dkms
* trash-cli
* tree
* ttf-dejavu
* ttf-indic-otf
* ttf-liberation
* ttf-mathtype
* ttf-ms-fonts
* ttf-noto
* ttf-symbola
* udiskie
systemctl --user enable --now udiskie.service
* units
* virtualbox
gpasswd -a $user vboxusers
chattr +C ~/.VirtualBox/ # improves performance on btrfs
** /etc/modules-load.d/virtualbox.conf
vboxdrv
vboxnetadp
vboxnetflt
** virtualbox-ext-oracle
** virtualbox-guest-iso
** virtualbox-host-dkms
* vlc
** libdvdcss
* wcalc
* wicd
systemctl enable --now wicd.service
* wine
need multilib repo if on 64-bit
** winetricks
** wine_gecko
** wine-mono
* words
* x11vnc
* xclip
* xf86-input-synaptics
* xf86-video-intel
** /etc/X11/xorg.conf.d/20-intel.conf
Section "Device"
   Identifier  "Intel Graphics"
   Driver      "intel"
   Option      "AccelMethod"  "sna"
   Option      "XvMC" "true"
EndSection
** /etc/X11/XvMCConfig
/usr/lib/libIntelXvMC.so
* xorg-apps
** xorg-xdpyinfo
** xorg-xmodmap
** xorg-xrandr
** xorg-xrdb
** xorg-xwd
* xorg-xbacklight
* xorg-server
* xorg-server-xephyr
* xorg-xclock
* xorg-xinit
* xscreensaver
systemctl --user enable --now xscreensaver.service
systemctl --user enable --now dpms.service
** xss-lock-git
