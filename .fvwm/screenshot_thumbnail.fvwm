################################################################################
#
# SCREENSHOT THUMBNAIL FUNCTIONS
#
################################################################################

################################################################################
# NOTES
################################################################################

# this file contains code to screen capture individual windows, shrink the image
# to a thumbnail and build a windowlist-like menu with the screenshots
# Also, it periodically takes a screenshot of the current window.
# You can change the delay with periodic_thumbnail_delay.

# the idea is based on taviso's FvwmExpose, and the code is derived from that

# needs ImageMagick convert and standard Unix utilities


################################################################################
# INITIALIZATION
################################################################################

# this needs to be set in the script as well
InfoStoreAdd screenshot_icon_dir /dev/shm

# in seconds
InfoStoreAdd periodic_thumbnail_delay 15

AddSchedId PERIODIC_THUMBNAIL_SCHED_ID

CopyMenuStyle * screenshot_menu_style
MenuStyle screenshot_menu_style SelectOnRelease Super_L
#ChangeMenuStyle screenshot_menu_style ScreenShotMenu
#MenuStyle * SelectOnRelease Super_L


################################################################################
# FUNCTIONS
################################################################################

# stripped down version of taviso's Thumbnail function
# makes a screenshot icon of the focused window
# only pick windows that are closable, because those that are not are generally
# things like FvwmButtons that you don't want thumbnails of anyway
DestroyFunc ScreenShotThumbnail
AddToFunc ScreenShotThumbnail
+ I ThisWindow (Visible, !Iconic, Iconifiable) \
    WindowStyle IconOverride, Icon $[infostore.screenshot_icon_dir]/$[w.id]_big.png
+ I TestRc (Match) Exec \
    nice -n 19 xwd -silent -id $[w.id] | \
    convert -size 256x192 -thumbnail '252x188>' \
        -bordercolor transparent -border 128 \
        -gravity center -crop 256x192+0+0 \
        xwd:- png:$[infostore.screenshot_icon_dir]/$[w.id]_big.png >/dev/null 2>&1 & \
    nice -n 19 convert -filter sinc -resize '128x96!' \
        png:$[infostore.screenshot_icon_dir]/$[w.id]_big.png \
        png:$[infostore.screenshot_icon_dir]/$[w.id].png >/dev/null 2>&1 &
#+ I Echo debug: ScreenShotThumbnail $[w.name]:$[w.id]

# rearranges iconified windows, called when an icon is added or removed
DestroyFunc RearrangeIcons
AddToFunc RearrangeIcons
+ I All (CurrentPage, Iconic, AnyScreen) PlaceAgain Icon


# truncates the window name if it's too long
# stripped down version of taviso's FvwmExpose function
# generates a windowlist-like menu of all windows on the current desk,
# using screenshot thumbnails as icons
DestroyFunc ShowScreenShotMenu
AddToFunc ShowScreenShotMenu
# if there are no windows on the current desk, do a winlist for all desks
+ I None (!Shaded, CurrentDesk, AcceptsFocus) WindowList SelectOnRelease Super_L
+ I TestRc (Match) Break
# rebuild the screen shot menu
+ I DestroyMenu Recreate ScreenShotMenu
+ I AddToMenu ScreenShotMenu "$[desk.name$[desk.n]]" Title
+ I ChangeMenuStyle screenshot_menu_style ScreenShotMenu
+ I AddToMenu ScreenShotMenu DynamicPopDownAction DestroyMenu ScreenShotMenu
# and a window list so all windows are accessible
+ I AddToMenu ScreenShotMenu "%mini.windows.xpm% W I N D O W   L I S T " WindowList SelectOnRelease Super_L
# this will add a menu entry for each non-iconic window
# the window name is shortened if longer than 50 chars
+ I All (!Iconic, !Shaded, CurrentDesk, AcceptsFocus, !CirculateHit) \
    PipeRead '$[infostore.script_dir]/screenshot_winlist.sh $[w.id]'
# this does the same for all iconic windows
# the only difference is that the name now has parens around it (and the iconic windows go at the end of the menu)
+ I All (Iconic, !Shaded, CurrentDesk, AcceptsFocus, !CirculateHit) \
    PipeRead '$[infostore.script_dir]/screenshot_winlist.sh $[w.id] iconic'
# show the menu
+ I Menu ScreenShotMenu


# this function calles itself every periodic_thumbnail_delay seconds 
#   and calls the screenshot function
# needs 2.5.17
DestroyFunc PeriodicThumbnail
AddToFunc PeriodicThumbnail
# Deschedule for idempotency
+ I Deschedule $[PERIODIC_THUMBNAIL_SCHED_ID]
# Current is necessary, otherwise ThisWindow doesn't work
+ I Schedule periodic $[infostore.periodic_thumbnail_delay]000 $[PERIODIC_THUMBNAIL_SCHED_ID] \
    Current ScreenShotThumbnail

# this tries to cleanup thumbnail pngs after the window is closed
DestroyFunc SSTNOnClose
AddToFunc SSTNOnClose
+ I Schedule 5000 Exec exec /bin/rm -f $[infostore.screenshot_icon_dir]/$[w.id].png $[infostore.screenshot_icon_dir]/$[w.id]_big.png
+ I NoWindow RearrangeIcons


################################################################################
# MODULES
################################################################################

# an FvwmEvent to screenshot a window every time it is raised
DestroyModuleConfig FvwmEventThumbnail: *
*FvwmEventThumbnail: Cmd
*FvwmEventThumbnail: Delay 1
*FvwmEventThumbnail: raise_window   ScreenShotThumbnail
*FvwmEventThumbnail: add_window     ScreenShotThumbnail
*FvwmEventThumbnail: focus_change   ScreenShotThumbnail
#*FvwmEventThumbnail: map            ScreenShotThumbnail
*FvwmEventThumbnail: iconify        RearrangeIcons
*FvwmEventThumbnail: deiconify      RearrangeIcons
*FvwmEventThumbnail: destroy_window SSTNOnClose


################################################################################
# BINDINGS
################################################################################

#Mouse   2       R       A       ShowScreenShotMenu
Key     Tab     A       4       NoWindow ShowScreenShotMenu


################################################################################
# STARTUP
################################################################################

KillModule FvwmEvent FvwmEventThumbnail
Module FvwmEvent FvwmEventThumbnail

PeriodicThumbnail

AddToFunc StartFunction
+ I Exec exec rm -f $[infostore.screenshot_icon_dir]/0x*.png

