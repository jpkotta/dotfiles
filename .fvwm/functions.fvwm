################################################################################
#
# COMPLEX FUNCTIONS
#
################################################################################

################################################################################
# FUNCTIONS TO LAUNCH APPS
################################################################################

# opens a new opera session if no operas are open
# otherwise it will open a new opera, in the same session
# if you do Exec exec, it starts a new session everytime
DestroyFunc StartBrowser
AddToFunc StartBrowser
#+ I None (opera) Exec export XLIB_SKIP_ARGB_VISUALS=1 ; aoss opera $0
+ I None (opera) Exec export XLIB_SKIP_ARGB_VISUALS=1 ; opera $0
+ I TestRc (!Match) Exec opera -newwindow $0
+ I Schedule 100 All (opera, CurrentPage, !Shaded, !Iconic) Maximize True
+ I Schedule 1000 All (opera, CurrentPage, !Shaded, !Iconic) Maximize True

DestroyFunc StartPySol
AddToFunc StartPySol
+ I None (pysol) Exec exec pysol

DestroyFunc StartEditor
AddToFunc StartEditor
+ I Exec $HOME/bin/editor $*

DestroyFunc StartTerminal
AddToFunc StartTerminal
+ I Exec exec urxvt $*

DestroyFunc StartRootTerminal
AddToFunc StartRootTerminal
+ I StartTerminal $* -e su

DestroyFunc StartFileManager
AddToFunc StartFileManager
+ I Exec exec /usr/bin/krusader
#+ I Exec exec /usr/bin/thunar
#+ I Exec exec /usr/bin/nautilus --no-desktop --browser
#+ I Exec exec xwc

DestroyFunc StartImageViewer
AddToFunc StartImageViewer
+ I Exec exec gqview $0

DestroyFunc StartImageEditor
AddToFunc StartImageEditor
+ I Exec exec gimp $0

DestroyFunc StartConsole
AddToFunc StartConsole
# Eterm understands '-e', but not '-name' or '-title', so we override those
#+ I FvwmConsole -terminal Eterm --name FvwmConsole --title FvwmConsole --icon-name FvwmConsole
+ I FvwmConsole -terminal urxvt

DestroyFunc StartXErrorViewer
AddToFunc StartXErrorViewer
+ I StartTerminal \
    -T 'X Errors' -n 'X Errors' -e tail -s 3 -f $HOME/.X-log-`echo $$DISPLAY | \
    sed -e 's/://g' -e 's/[.][0-9]*//g'`
#+ I StartTerminal \
#    -T 'X Errors' -n 'X Errors' -e tail -s 3 -f $HOME/.xsession-errors

DestroyFunc StartFahLogViewer
AddToFunc StartFahLogViewer
+ I StartTerminal -e tail -F /opt/foldingathome/1/FAHlog.txt

DestroyFunc StartTop
AddToFunc StartTop
+ I StartTerminal -geometry 80x40 -T Top -n Top -e bash -c "TERM=rxvt htop"

DestroyFunc StartCalculator
AddToFunc StartCalculator
+ I StartTerminal -e wcalc

DestroyFunc LoadMusicCD
AddToFunc LoadMusicCD
+ I Test (EnvIsSet CDROM_DEVICE) \
    Exec eject -t $[CDROM_DEVICE] ; xmms --play /media/$[CDROM_DEVICE]
        
DestroyFunc EjectMusicCD
AddToFunc EjectMusicCD
+ I Test (EnvIsSet CDROM_DEVICE) \
    Exec xmms --stop ; eject $[CDROM_DEVICE]

DestroyFunc LoadMovieDVD
AddToFunc LoadMovieDVD
+ I Test (EnvIsSet DVD_DEVICE) \
    Exec eject -t $[DVD_DEVICE] ; xine --auto-play --auto-scan dvd

DestroyFunc EjectMovieDVD
AddToFunc EjectMovieDVD
+ I Test (EnvIsSet DVD_DEVICE) \
    Exec xine --session quit ; eject $[DVD_DEVICE]

DestroyFunc StartPackageManager
AddToFunc StartPackageManager
+ I Exec exec gksudo synaptic


################################################################################
# SCREENSAVER FUNCTIONS
################################################################################

DestroyMenu ScreenSaverOffMsg
AddToMenu ScreenSaverOffMsg "Screen Saver OFF" Title

DestroyMenu ScreenSaverOnMsg
AddToMenu ScreenSaverOnMsg "Screen Saver ON" Title

DestroyFunc StartScreensaver
AddToFunc StartScreensaver
+ I Exec exec xscreensaver

DestroyFunc StopScreensaver
AddToFunc StopScreensaver
+ I Exec exec xscreensaver-command -exit

DestroyFunc ToggleScreensaver
AddToFunc ToggleScreensaver
+ I PipeRead '\
    if ps -ef | grep -v grep | grep $[USER] | grep xscreensaver 2>1 >/dev/null ; \
    then echo StopScreensaver ; \
         echo Menu ScreensaverOffMsg ; \
    else echo StartScreensaver ; \
         echo Menu ScreensaverOnMsg ; \
    fi'

        
################################################################################
# QUIT FUNCTIONS
################################################################################
        
# $0 = menu entry text
# $1 = function
DestroyFunc ConfirmMenuFunc
AddToFunc ConfirmMenuFunc
+ I DestroyMenu ConfirmMenu
+ I AddToMenu ConfirmMenu "ESC TO CANCEL" Title
+ I AddToMenu ConfirmMenu "$0" $1
+ I Menu ConfirmMenu Root c c WarpTitle

DestroyFunc BlankScreen
AddToFunc BlankScreen
# 3 sec wait so it doesn't recieve any key presses or mouse movements
+ I Schedule 3000 Exec exec xset dpms force off

DestroyFunc LockScreen
AddToFunc LockScreen
# 3 sec wait so it doesn't recieve any key presses or mouse movements
+ I Schedule 3000 Exec exec xscreensaver-command -lock

DestroyFunc SleepSystem
AddToFunc SleepSystem
+ I Exec exec gdm-signal --suspend

DestroyFunc HibernateSystem
AddToFunc HibernateSystem
+ I Exec exec gdm-signal --hibernate

DestroyFunc RebootSystem
AddToFunc RebootSystem
+ I Exec exec gdm-signal --reboot
+ I Quit

DestroyFunc ShutDownSystem
AddToFunc ShutDownSystem
+ I Exec exec gdm-signal --halt
+ I Quit

################################################################################
# WINDOWSHADE + CHANGE TITLE DIRECTION
################################################################################

# intended for a binding to the handles/frame
# double click will change title direction and shade
DestroyFunc ResizeRaiseShadeDirection
AddToFunc ResizeRaiseShadeDirection
+ M Resize
+ M Raise
+ C Raise
+ D shade$0
 
DestroyFunc shadeN
AddToFunc shadeN
+ I WindowShade N
+ I ThisWindow (shaded) WindowStyle TitleAtTop
+ I ThisWindow (!shaded) WindowStyle TitleAtTop
 
DestroyFunc shadeS
AddToFunc shadeS
+ I WindowShade S
+ I ThisWindow (shaded) WindowStyle TitleAtBottom
+ I ThisWindow (!shaded) WindowStyle TitleAtTop
 
DestroyFunc shadeW
AddToFunc shadeW
+ I WindowShade W
+ I ThisWindow (shaded) WindowStyle TitleAtLeft
+ I ThisWindow (!shaded) WindowStyle TitleAtTop
 
DestroyFunc shadeE
AddToFunc shadeE
+ I WindowShade E
+ I ThisWindow (shaded) WindowStyle TitleAtRight
+ I ThisWindow (!shaded) WindowStyle TitleAtTop


################################################################################
# FOCUSING
################################################################################

DestroyFunc FocusAndRaise
AddToFunc FocusAndRaise
+ I FlipFocus
+ I Raise

# default is to warp to the NW corner
# I think it makes more sense to warp to the middle
DestroyFunc WindowListFunc
AddToFunc WindowListFunc
+ I Iconify off
+ I FlipFocus
+ I Raise
+ I WarpToWindow 50 50

# NextWindow cycles thru the windows of the current page in window list order
# PrevWindow cycles thru in reverse, but since the window list is sorted by 
#   the order in which the windows were focused, it has the effect of toggling 
#   between the current window and the previous window
# NoWindow command is needed otherwise windows are focused in a strange order - not sure why
DestroyFunc FocusNextWindow
AddToFunc FocusNextWindow
+ I NoWindow Next (!Desktop*, CurrentPage, !Iconic, AcceptsFocus, AnyScreen) \
    FlipFocus NoWarp

DestroyFunc FocusPrevWindow
AddToFunc FocusPrevWindow
+ I NoWindow Prev (!Desktop*, CurrentPage, !Iconic, AcceptsFocus, AnyScreen) \
    FlipFocus NoWarp

DestroyFunc FocusNextWindowOnScreen
AddToFunc FocusNextWindowOnScreen
+ I NoWindow Next (!Desktop*, CurrentPage, !Iconic, AcceptsFocus) \
    FlipFocus NoWarp

DestroyFunc FocusPrevWindowOnScreen
AddToFunc FocusPrevWindowOnScreen
+ I NoWindow Prev (!Desktop*, CurrentPage, !Iconic, AcceptsFocus) \
    FlipFocus NoWarp

DestroyFunc NextWindow
AddToFunc NextWindow
+ I FocusNextWindow
+ I Current Raise

DestroyFunc PrevWindow
AddToFunc PrevWindow
+ I FocusPrevWindow
+ I Current Raise

DestroyFunc NextWindowOnScreen
AddToFunc NextWindowOnScreen
+ I FocusNextWindowOnScreen
+ I Current Raise

DestroyFunc PrevWindowOnScreen
AddToFunc PrevWindowOnScreen
+ I FocusPrevWindowOnScreen
+ I Current Raise



################################################################################
# DESK/PAGE NAVIGATION
################################################################################

# # Move window to next/previous desk and switch to that desk
# # args: same as GotoDesk
# DestroyFunc MoveAndGotoDesk
# AddToFunc MoveAndGotoDesk
# + I Current (!Sticky) Stick
# + I KeepRc GotoDesk $0 $1 $2
# + I TestRc (Match) Stick

# Move window to next/previous desk and switch to that desk
# args: same as GotoDesk
DestroyFunc MoveAndGotoDesk
AddToFunc MoveAndGotoDesk
+ I Current MoveToDesk $0 $1 $2
+ I GotoDesk $0 $1 $2

# Cycles thru pages like english text
# e.g. on a 2x2 desktop:
#       1 2
#       3 4
DestroyFunc CyclePages
AddToFunc CyclePages
+ I PipeRead ' \
   case $0 in \
      up) if [ $[page.nx] -lt $$(( $[desk.pagesx] - 1 )) ] ; \
         then echo GotoPage +1p 0p ; \
         elif [ $[page.nx] -eq $$(( $[desk.pagesx] - 1 )) -a $[page.ny] -lt $$(( $[desk.pagesy] - 1 )) ] ; \
         then echo GotoPage 0 +1p ; \
         else echo GotoPage 0 0 ; \
         fi ;; \
      down) if [ $[page.nx] -gt 0 ] ; \
         then echo GotoPage -1p 0p ; \
         elif [ $[page.nx] -eq 0 -a $[page.ny] -gt 0 ] ; \
         then echo GotoPage -1 -1p ; \
         else echo GotoPage -1 -1 ; \
         fi ;; \
   esac'

# # Move window to next/previous page and switch to that page
# # Same syntax as CyclePages
# DestroyFunc MoveAndGotoPage
# AddToFunc MoveAndGotoPage
# + I Current (!Sticky) Stick
# + I KeepRc CyclePages $0
# + I TestRc (Match) Stick

# Move window to next/previous page and switch to that page
# Same syntax as CyclePages
DestroyFunc MoveAndGotoPage
AddToFunc MoveAndGotoPage
+ I PipeRead ' \
   case $0 in \
      up) if [ $[page.nx] -lt $$(( $[desk.pagesx] - 1 )) ] ; \
         then echo Current MoveToPage +1p 0p ; \
         elif [ $[page.nx] -eq $$(( $[desk.pagesx] - 1 )) -a $[page.ny] -lt $$(( $[desk.pagesy] - 1 )) ] ; \
         then echo Current MoveToPage 0 +1p ; \
         else echo Current MoveToPage 0 0 ; \
         fi ;; \
      down) if [ $[page.nx] -gt 0 ] ; \
         then echo Current MoveToPage -1p 0p ; \
         elif [ $[page.nx] -eq 0 -a $[page.ny] -gt 0 ] ; \
         then echo Current MoveToPage -1 -1p ; \
         else echo Current MoveToPage -1 -1 ; \
         fi ;; \
   esac'
+ I CyclePages $0


################################################################################
# WINDOW MOVEMENT AND OTHER ACTIONS
################################################################################

# warp to middle of window and then move, so the pointer never goes off the
# screen before the window does, causing a page flip
DestroyFunc WarpAndMove
AddToFunc WarpAndMove 
+ I WarpToWindow 50 50 
+ I Schedule 10 Move

# Warp to the bottom-right corner and resize
DestroyFunc ResizeWarpSE
AddToFunc ResizeWarpSE
+ I WarpToWindow 90 90
+ M Resize Direction SE

# Warp to the top-left corner and resize
DestroyFunc ResizeWarpNW
AddToFunc ResizeWarpNW
+ I WarpToWindow 10 10
+ M Resize Direction NW

# these are bound to title bar clicks
DestroyFunc DeiconifyFocusAndRaise
AddToFunc DeiconifyFocusAndRaise 
+ I Iconify off
+ I Focus
+ I Raise

DestroyFunc MoveOrMaximize
AddToFunc MoveOrMaximize
+ I Raise
+ M Move
+ D ThisWindow (Iconic) Maximize True
+ D TestRc (NoMatch) Maximize 100 100
+ D Iconify False

# maximize across dual screens
DestroyFunc MaximumMaximize
AddToFunc MaximumMaximize
+ I MoveToScreen $[LEFT_SCREEN]
+ I Maximize 200 100

DestroyFunc IconifyOrResize
AddToFunc IconifyOrResize
+ C Iconify
+ M ResizeWarpNW
+ D All ($c, CurrentPage, AnyScreen) Iconify On

# pops up a window-op menu or closes
# bound to the window button
DestroyFunc WindowMenuOrClose
AddToFunc WindowMenuOrClose
+ C Menu WindowOps mouse -1p -1p
+ D Close

# like above but different menu
DestroyFunc WindowMenuOrCloseIcon
AddToFunc WindowMenuOrCloseIcon
+ I Menu WindowOpsSmall c+0 -101m
+ D Close

# fullscreen mode - fully maximized, no decorations, borders, etc.
# simutaneously toggles title bar, border, and maximize
AddState FULLSCREEN_STATE

DestroyFunc FullScreenToggle
AddToFunc FullScreenToggle
+ I ThisWindow (State $[FULLSCREEN_STATE]) FullScreenOff
+ I TestRc (!Match) FullScreenOn

DestroyFunc FullScreenOn
AddToFunc FullScreenOn
+ I WindowStyle !Title, !Borders, FixedUSPosition, FixedUSSize
+ I Raise
+ I UpdateStyles
+ I Maximize on 100 100
+ I State $[FULLSCREEN_STATE] on

DestroyFunc FullScreenOff
AddToFunc FullScreenOff
+ I WindowStyle Title, Borders, VariableUSPosition, VariableUSSize
+ I Maximize off
+ I State $[FULLSCREEN_STATE] off

DestroyFunc ToggleMovable
AddToFunc ToggleMovable
+ I ThisWindow (FixedPosition) WindowStyle VariablePosition
+ I TestRc (NoMatch) WindowStyle FixedPosition

DestroyFunc ToggleResizable
AddToFunc ToggleResizable
+ I ThisWindow (FixedSize) WindowStyle VariableSize
+ I TestRc (NoMatch) WindowStyle FixedSize

# make windows "persistent" (because they're going to be around for a while)
# toggles DeskStick, Layer 6, and !Closable
AddState PERSISTENCE_STATE

DestroyFunc PersistenceOn
AddToFunc PersistenceOn
+ I StickAcrossPages true
+ I Layer 0 6
+ I WindowStyle !Closable
+ I State $[PERSISTENCE_STATE] on

DestroyFunc PersistenceOff
AddToFunc PersistenceOff
+ I StickAcrossPages false
+ I Layer default
+ I WindowStyle Closable
+ I State $[PERSISTENCE_STATE] off

DestroyFunc PersistenceToggle
AddToFunc PersistenceToggle
+ I ThisWindow (State $[PERSISTENCE_STATE]) PersistenceOff
+ I TestRc (!Match) PersistenceOn


################################################################################
# MISC FUNCTIONS
################################################################################

DestroyFunc SetWallpaper
AddToFunc SetWallpaper
#+ I Exec Esetroot -fit -center $0
+ I Exec hsetroot -full '$0'
+ I Exec ln -sf '$0' $HOME/tmp/current_wallpaper

DestroyFunc ResetWallpaper
AddToFunc ResetWallpaper
#+ I Exec Esetroot -fit -center $HOME/tmp/current_wallpaper
+ I Exec hsetroot -full $HOME/tmp/current_wallpaper

DestroyFunc FlipCurrentWallpaper
AddToFunc FlipCurrentWallpaper
+ I PipeRead 'convert -flop $HOME/tmp/current_wallpaper $HOME/tmp/flipped_wallpaper.png >/dev/null 1>&2'
+ I SetWallpaper $HOME/tmp/flipped_wallpaper.png

# these will overwrite an existing screenshot image
DestroyMenu ScreenShotNotify
AddToMenu ScreenShotNotify "Screenshot in 5 seconds..." Title

DestroyFunc ScreenShotRoot
AddToFunc ScreenShotRoot
+ I Menu ScreenShotNotify
+ I Exec sleep 5 ; xwd -root -silent | xwdtopnm | pnmtopng > $HOME/screenshot.png

DestroyFunc ScreenShotWindow
AddToFunc ScreenShotWindow
+ I Exec xwd -id $[w.id] -silent | xwdtopnm | pnmtopng > $HOME/screenshot.png

# usb key drive mount/unmount functions
DestroyMenu UnmountUSBTrue
AddToMenu UnmountUSBTrue "USB Key Drive Successfully Unmounted" Title
DestroyMenu UnmountUSBFalse
AddToMenu UnmountUSBFalse "USB Key Drive NOT Unmounted Yet!" Nop

DestroyMenu MountUSBTrue
AddToMenu MountUSBTrue "USB Key Drive Successfully Mounted" Title
DestroyMenu UnmountUSBFalse
AddToMenu MountUSBFalse "USB Key Drive NOT Mounted Yet!" Nop

DestroyFunc UnmountKeyDrive
AddToFunc UnmountKeyDrive
# try to unmount it
+ I Exec umount /media/removable
# check if the unmount was successful
# if it is unmounted, then immediately stop checking and display the menu
# if not, wait for a second and test again
# if after three checks it is not unmounted, then display the menu
+ I PipeRead \
    'unmounted=0 ; \
    for i in `seq 1 3` ; \
    do \
        if [ -z "`mount | grep /media/removable`" ] ; \
        then unmounted=1 ; break ; \
        fi ; \
        sleep 1 ; \
    done ; \
    if [ $$unmounted -eq 0 ] ; \
    then echo Menu UnmountUSBFalse ; \
    else echo Menu UnmountUSBTrue ; \
    fi'

DestroyFunc MountKeyDrive
AddToFunc MountKeyDrive
# try to unmount it
+ I Exec mount /media/removable
# check if the unmount was successful
# if it is unmounted, then immediately stop checking and display the menu
# if not, wait for a second and test again
# if after three checks it is not unmounted, then display the menu
+ I PipeRead \
    'mounted=0 ; \
    for i in `seq 1 3` ; \
    do \
        if [ -n "`mount | grep /media/removable`" ] ; \
        then mounted=1 ; break ; \
        fi ; \
        sleep 1 ; \
    done ; \
    if [ $$mounted -eq 0 ] ; \
    then echo Menu MountUSBFalse ; \
    else echo Menu MountUSBTrue ; \
    fi'

# show/hide the desktop (iconify all windows on the current page)
DestroyFunc ShowHideDesktop
AddToFunc ShowHideDesktop
# faster with this off
+ I KillModule FvwmAnimate 
+ I Schedule 500 Module FvwmAnimate
+ I All (CurrentPage, !Iconic, !CirculateHit, !CirculateHitIcon, !CirculateHitShaded, AnyScreen) \
    Iconify on
+ I TestRC (!Match) All (CurrentPage, AnyScreen) \
    Iconify off

DestroyFunc ShowDesktop
AddToFunc ShowDesktop
# faster with this off
+ I KillModule FvwmAnimate 
+ I Schedule 500 Module FvwmAnimate
+ I All (CurrentPage, Iconic, !CirculateHit, !CirculateHitIcon, !CirculateHitShaded, AnyScreen) \
    Iconify off

DestroyFunc HideDesktop
AddToFunc HideDesktop
# faster with this off
+ I KillModule FvwmAnimate 
+ I Schedule 500 Module FvwmAnimate
+ I All (CurrentPage, !Iconic, !CirculateHit, !CirculateHitIcon, !CirculateHitShaded, AnyScreen) \
    Iconify on

# this will let you keep picking windows until you click on root or hit ESC
# sometimes it gets run twice, e.g. 'PickAgain FvwmIdent'
# adding a Schedule 0 fixes problems with Close, but causes other problems
DestroyFunc PickAgain
AddToFunc PickAgain
+ I Pick $*
# prevent infinite recursion (fvwm actually does this automatically, but only after 512 iterations)
+ I PipeRead "test $[func.context] = r && echo 'PickAgain $*'"

# zooms a window using xmag, then swallows the xmag window with FvwmScroll
# the original window should be untouched
DestroyFunc ZoomWindow
AddToFunc ZoomWindow 
+ I Exec exec xmag -source $[w.width]x$[w.height]+$[w.x]+$[w.y] -mag 2
+ I Wait xmag
+ I Next (xmag) Module FvwmScroll


