#!/usr/bin/env python3

from sys import stderr
from math import log10, floor
from itertools import islice
from collections import Counter
import argparse
import re
import os
from random import shuffle

DEFAULT_MIN_LEN = 3
DEFAULT_MAX_LEN = 6
DEFAULT_NUM_WORDS = 4
DEFAULT_NUM_PASSWDS = 4

def gen_pw(min_len, max_len, num_words):
    return " ".join(i for i in islice(
        (w for w in words if min_len <= len(w) <= max_len),
        num_words))

def compute_entropy(min_len, max_len, num_words):
    return num_words*log10(sum(count for length,count in word_counts.items()
                             if min_len <= length <= max_len))/log10(2)

def main():
    ap = argparse.ArgumentParser()

    ap.add_argument("-m", "--min-length", dest="min_len",
                    type=int, default=DEFAULT_MIN_LEN,
                    help="Minimum word length (default = %d)" % DEFAULT_MIN_LEN)
    ap.add_argument("-M", "--max-length", dest="max_len",
                    type=int, default=DEFAULT_MAX_LEN,
                    help="Maximum word length (default = %d)" % DEFAULT_MAX_LEN)
    ap.add_argument("-n", "--num-words", dest="num_words",
                    type=int, default=DEFAULT_NUM_WORDS,
                    help="Number of words (default = %d)" % DEFAULT_NUM_WORDS)
    ap.add_argument("-N", "--num-passwds", dest="num_passwds",
                    type=int, default=DEFAULT_NUM_PASSWDS,
                    help=("Number of passwords to generate (default = %d)"
                          % DEFAULT_NUM_PASSWDS))
    
    args = ap.parse_args()

    if (args.min_len < 1 or args.max_len < args.min_len or args.num_words < 1
        or args.num_passwds < 1):
        print("Nonsensical arguments.", file=stderr)
        exit(1)

    build_word_list()
        
    for _ in range(args.num_passwds):
        passwd = gen_pw(args.min_len, args.max_len, args.num_words)
        print(passwd)

    print("Strength: %d bits."
          % floor(compute_entropy(args.min_len, args.max_len, args.num_words)),
          file=stderr)

cache_dir = os.environ.get("XDG_CACHE_HOME",
                           os.path.join(os.environ["HOME"], ".cache"))
CACHE_FILE = os.path.join(cache_dir, "mkpasswd.list")

words = []
word_counts = Counter()

def build_word_list():
    global words # pylint: disable=global-statement
    global word_counts # pylint: disable=global-statement

    _words = []
    
    try:
        with open(CACHE_FILE, "r") as f:
            for line in f:
                _words.append(line.strip())
    except FileNotFoundError:
        dict_file = "/usr/share/dict/words"
        print("Building dictionary from %s." % dict_file, file=stderr)
        try:
            with open(dict_file, "r") as src:
                try:
                    with open(CACHE_FILE, "w") as dest:
                        for line in src:
                            if re.match("^[A-Za-z0-9]{1,20}$", line):
                                dest.write(line)
                                _words.append(line.strip())
                except PermissionError:
                    print("Could not open %s for writing." % CACHE_FILE,
                          file=stderr)
                    exit(1)
        except FileNotFoundError:
            print("Could not open %s for reading." % dict_file,
                  file=stderr)
            exit(1)
            
    shuffle(_words)
    word_counts = Counter(len(w) for w in _words)
    words = iter(_words)

if __name__ == '__main__':
    main()
    
                
