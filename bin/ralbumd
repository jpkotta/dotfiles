#!/usr/bin/env perl

use warnings;
use strict;

use Audio::MPD;
use POSIX qw(setsid);

# TODO:
# mode that doesn't daemonize
# store a pid file and have a kill option

my $pid_file = "/tmp/$ENV{USER}-ralbumd.pid";
my $pid = "";
my $daemonize = 1;

# kill running instances
sub kill_old()
{
    open(PID_FILE, "<$pid_file")
	or die("Could not open $pid_file for reading: $!\n");
    $pid = <PID_FILE>;
    close(PID_FILE);
    unlink($pid_file);
    kill("TERM", $pid);
}

# if called with the "kill" argument, kill the running instance
if (defined($ARGV[0]) && $ARGV[0] eq "kill") {
    if (-e $pid_file) {
	kill_old();
    }
    else {
	print "PID file $pid_file not found.\n";
    }
    exit(0);
}

# if called with the "debug" argument, don't daemonize
if (defined($ARGV[0]) && $ARGV[0] eq "debug") {
    $daemonize = 0;
}

# daemonize
if ($daemonize) {
    if (-e $pid_file) {
	kill_old();
    }

    chdir("/")
	or die("Can't chdir to /: $!");
    umask(0);

    open(STDIN, "</dev/null")
	or die("Can't redirect STDIN to /dev/null: $!");
    open(STDOUT, ">/dev/null")
	or die("Can't redirect STDOUT to /dev/null: $!");
    open(STDERR, ">/dev/null")
	or die("Can't redirect STDERR to /dev/null: $!");

    my $pid = fork();
    defined($pid)
	or die("Can't fork(): $!");

    if ($pid != 0) {
	exit(0);
    }

    setsid()
	or die("Can't start new session: $!");

    open(PID_FILE, ">$pid_file")
	or die("Could not open $pid_file: $!\n");
    print PID_FILE $$;
    close(PID_FILE);
}

# connect to MPD server
my $mpd = Audio::MPD->new();
defined($mpd)
    or die("Could not connect to MPD server\n");

# randomize prng
srand(time);

my $playlist_finished = 0;
my $delay = 1;
while (1) {
    my %status = %{ $mpd->status() };

    if ($playlist_finished
	&& $status{state} eq "stop") {

	my @albums = $mpd->collection->all_albums();
	my $idx = int(rand($#albums));
	my @songs = $mpd->collection->songs_from_album($albums[$idx]);

	$mpd->playlist->clear();
	my $song;
	foreach $song (@songs) {
	    $mpd->playlist->add($$song{file});
	}
	$playlist_finished = 0;

	$mpd->play();
    }

    if (defined($status{song})
	&& $status{playlistlength} - 1 == $status{song}) {
	if ($status{time}{seconds_left} <= 2*$delay) {
	    $playlist_finished = 1;
	}
    }

    sleep($delay);
}
