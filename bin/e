#!/usr/bin/env python3

"""
This is a very simple command line calculator.  It reads in all
arguments as a single string and runs eval() on them.  The math module
is imported so you have access to all of that.  If run with no
arguments, it allows you to input a single line expression.  In the
case of command line args, square brackets are replaced with round
parentheses, because many shells interpret round parentheses if they
are not quoted.
"""

import sys, numbers
import cmath, math

env = math.__dict__
env.update(cmath.__dict__)
for k in [k for k in env if k.startswith("__")]:
    env.pop(k)

def log2(x):
    """Return the base-2 logarithm of x."""
    return cmath.log(x, 2)
env["log2"] = log2

def binom(n,k):
    """Binomial coefficient"""
    if k > n or n < 0 or k < 0:
        raise ValueError("math domain error")

    n = int(n)
    k = int(k)

    ret = 1

    for i in range(1, min(k, n-k) + 1):
        ret *= n + 1 - i
        ret //= i

    return ret
env["binom"] = binom

def bf(x, offset, length=1):
    """Print a subset of the bits in x.
    bf(0x1234, 4, 2) -> 0x3
    bf(0x1234, 16) -> 0x0
    """
    m = (1 << length) - 1
    r = (x >> offset) & m
    return r
env["bf"] = bf

def bfh(x, offset, length=1):
    """Like bf(), but runs hex() on the output."""
    return hex(bf(x, offset, length))
env["bfh"] = bfh

# the smallest number such that 1+eps != 1
# (this is approximate)
epsilon = sys.float_info.epsilon
env["eps"] = epsilon

env["inf"] = float("inf")
env["nan"] = float("nan")
env["phi"] = (math.sqrt(5)+1)/2

env["help"] = "\n".join(sorted(env.keys())) # this should be last

def main(expr):
    res = eval(expr, env)
    # throw away small imaginary parts, they're probably just due to imprecision
    if (isinstance(res, numbers.Number)
        and res != 0
        and abs(res.imag) < 10*epsilon*abs(res)):
        res = res.real

    return res

if __name__ == '__main__':
    args = sys.argv[1:]

    if len(args) < 1:
        while True:
            try:
                expr = input("e> ")
            except (EOFError, KeyboardInterrupt):
                sys.exit(0)
            if len(expr) == 0:
                break
            print(main(expr))
    else:
        expr = " ".join(args[:])
        expr = expr.replace("[", "(").replace("]", ")")
        print(str(main(expr)).replace("(", "[").replace(")", "]"))
